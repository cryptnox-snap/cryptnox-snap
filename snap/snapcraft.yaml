name: cryptnox
base: core22  # Upgraded from core20
adopt-info: version-clean
summary: Cryptnox Card
website: https://www.cryptnox.com
description: |
  A command-line interface to manage and use Cryptnox cards.
  Provides wallets for Bitcoin and Ethereum and supports cleos commands.

  For development mode:

    snap install cryptnox --devmode

  Supported connections:

    snap connect cryptnox:raw-usb
    snap connect cryptnox:removable-media
    snap connect cryptnox:hardware-observe
    snap connect cryptnox:mount-observe

  Commands:

    snap services cryptnox
    snap restart cryptnox.pcscd
    cryptnox.pcsc-scan
    cryptnox.card
 
  Block for some readers:

    echo "blacklist nfc"  | sudo tee /etc/modprobe.d/blacklist-pn533.conf
    echo "blacklist pn533"  | sudo tee /etc/modprobe.d/blacklist-pn533.conf
    echo "blacklist pn533_usb" | sudo tee /etc/modprobe.d/blacklist-pn533.conf
    reboot

grade: stable
confinement: strict

architectures:
  - build-on: amd64
    build-for: amd64
  - build-on: arm64
    build-for: arm64

slots:
  pcscd-socket:
    interface: content
    content: pcscd-socket
    write:
      - $SNAP_COMMON/pcscd

apps:
  pcscd:
    command: usr/sbin/pcscd --foreground --auto-exit
    daemon: simple
    plugs:
      - mount-observe
      - removable-media
      - hardware-observe
      - network
      - network-bind
      - raw-usb
      - raw-input
      - i2c
      - serial-port
      - home
      - x11

    sockets:
      pcscd-socket:
        listen-stream: $SNAP_COMMON/pcscd/pcscd.comm
        socket-mode: 0666

  card:
    command: usr/bin/cryptnox
    environment:
      LANG: C.UTF-8
    plugs:
      - mount-observe
      - removable-media
      - hardware-observe
      - network
      - network-bind
      - raw-usb
      - raw-input
      - i2c
      - serial-port
      - home
      - x11

  pcsc-scan:
    command: usr/bin/pcsc_scan
    environment:
      LANG: C.UTF-8
    plugs:
      - mount-observe
      - removable-media
      - hardware-observe
      - network
      - network-bind
      - raw-usb
      - raw-input
      - i2c
      - serial-port
      - home
      - x11

  python:
    command: usr/bin/python
    command-chain:
      - bin/debian-multiarch-triplet-provider-launch
      - bin/perl-launch
        # - bin/wrapper
    environment:
      LANG: C.UTF-8
    plugs:
      - hardware-observe
      - network
      - network-bind
      - raw-usb
      - raw-input
      - serial-port
      - home
      - x11
      - mount-observe
      - removable-media
      - i2c

layout:
  /etc/reader.conf.d:
    bind: $SNAP/etc/reader.conf.d
  /usr/lib/pcsc/drivers:
    bind: $SNAP/usr/lib/pcsc/drivers
  /var/lib/usbutils:
    bind: $SNAP/var/lib/usbutils

parts:
  pcscd:
    source: .
    plugin: meson
    meson-parameters:
      - --prefix=/usr
      - -Dincludedir=/usr/include
      - -Dserialconfdir=/var/snap/$SNAPCRAFT_PROJECT_NAME/common/reader.conf.d
      - -Dipcdir=/var/snap/$SNAPCRAFT_PROJECT_NAME/common/pcscd
      - -Dlibudev=false
      - -Dlibusb=true # Using libudev instead
      - -Dembedded=false
      - -Dserial=false
      - -Dusb=true
      - -Dpolkit=false # Disable polkit for snap
      - -Dfilter_names=false
      # - -Dlibsystemd=true
      # - -Dsystemdunit=system

    override-pull: |
      snapcraftctl pull
      D_URL="https://pcsclite.apdu.fr/files/"
      # VER="pcsc-lite-2.3.0.tar.xz"
      VER="$(wget -O- -q $D_URL | html2text | grep -A1 'Latest version' | tail -1 |  sed 's/ .*$//' )"
      echo "$VER"
      echo "$D_URL$VER"
      D_FILE="$D_URL$VER"
      wget -O- -q $D_FILE | xzcat | tar x --strip-components=1
    build-packages:
      - html2text
      - tar
      - wget
      - libudev-dev
      - libsystemd-dev
      - libusb-1.0-0-dev
      - meson
      - ninja-build
      - pkg-config
      - flex
      - autoconf-archive
      - libtool
      - libc6-dev
    stage-packages:
      - libudev1
      - libusb-1.0-0
      - libsystemd0
      - libpcsclite1

  acsccid:
    source: .
    plugin: autotools
    autotools-configure-parameters:
      - --prefix=/usr/
    after: [pcscd]
    override-pull: |
      snapcraftctl pull
      SF_URL="https://sourceforge.net/projects/acsccid/files/acsccid"
      # VER=1.1.11
      VER="$(wget -O- -q $SF_URL | html2text | grep -A1 Parent_folder | tail -1 | sed 's/ .*$//')"
      D_URL="https://sourceforge.net/projects/acsccid/files/acsccid/$VER/acsccid-$VER.tar.bz2"
      echo "$D_URL"
      wget -O- -q $D_URL | bzcat | tar x --strip-components=1
    build-packages:
      - html2text
      - tar
      - wget
      - libusb-1.0-0-dev
      - flex
      - perl
      - pkg-config
    stage-packages:
      - libusb-1.0-0

  ccid:
    source: .
    plugin: autotools
    override-pull: |
      snapcraftctl pull
      C_URL="https://ccid.apdu.fr/files/"
      # VER=ccid-1.6.1.tar.xz
      VER="$(wget -O- -q $C_URL | html2text | grep -A1 'Latest version' | tail -1 |  sed 's/ .*$//' )"
      echo "$VER"
      C_FILE="$C_URL/$VER"
      wget -O- -q $C_FILE | xzcat | tar x --strip-components=1
    autotools-configure-parameters:
      - LDFLAGS="-lpthread"
      - --prefix=/usr/
    after: [ acsccid ]
    build-packages:
      - html2text
      - tar
      - wget
      - pkg-config
      - gcc
      - libc6-dev
      - libusb-1.0-0-dev
    stage-packages:
      - libusb-1.0-0

  pcsc-tools:
    source: .
    plugin: autotools
    after: [ ccid ]
    override-pull: |
      snapcraftctl pull
      T_URL="https://pcsc-tools.apdu.fr/"
      # VER=pcsc-tools-1.7.2.tar.bz2
      VER="$(wget -O- -q $C_URL | html2text | grep -A1 'Latest version' | tail -1 |  sed 's/ .*$//' )"
      T_FILE="$T_URL/$VER"
      wget -O- -q $T_FILE | bzcat | tar x --strip-components=1
    autotools-configure-parameters:
      - --prefix=/usr/
      - --includedir=/usr/include
    organize:
      $SNAPCRAFT_PART_SRC/LICENCE: usr/share/doc/pcsc-tools/LICENSE
    build-packages:
      - html2text
      - tar
      - wget
      - libgetopt-complete-perl
      - libpcsc-perl
      - libintl-perl 
    stage-packages:
      - libgetopt-complete-perl
      - libpcsc-perl
      - libintl-perl 
      - wget
    stage-snaps:
      - debian-multiarch-triplet-provider-launch
      - perl-launch

  python:
    after: [pcsc-tools]
    plugin: nil
    build-packages:
      - git
      - curl
      - libssl-dev
      - swig
      - build-essential
      - autoconf
      - libtool
      - pkg-config
      - python3-dev
      - python3-pip
      - rsync
      - zlib1g-dev
      - libbz2-dev
      - libssl-dev
      - libffi-dev
      - libreadline-dev
      - libsqlite3-dev
      - liblzma-dev
    build-environment:
      - PATH: /root/.pyenv/bin:$PATH
      - PYTHON_CFLAGS: -fPIC
      - PYTHON_CONFIGURE_OPTS: --enable-shared
    override-pull: |
      rm -rf /root/.pyenv
      curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
    override-build: |
      eval "$(pyenv init --path)"
      pyenv update
      pyenv install --force 3.12.7
      pyenv global 3.12.7
      python3 -m pip install --upgrade pip
    override-prime: |
      snapcraftctl prime
      cp -a ~/.pyenv/versions/3.12.7/* $SNAPCRAFT_PRIME/usr/

  pyscard:
    after: [python]
    plugin: nil
    build-packages:
      - html2text
      - tar
      - wget
      - jq
      - swig
      - build-essential
      - autoconf
      - libtool
      - pkg-config
      - python3-dev
      - python3-pip
    build-environment:
      - PATH: /root/.pyenv/bin:$PATH
    override-build: |
      eval "$(pyenv init --path)"
      pyenv global 3.12.7

      # Custom Block 2.0.3 
      # python3 -m pip download --no-binary :all: pyscard==2.0.3
      # tar -xvf pyscard*.tar*
      # cd pyscard-2.0.3
      # wget https://gist.githubusercontent.com/kokoye2007/75ef6722fb123257552dd4e7040fbb79/raw/3b0e420855316c41b98c6223cf0f5686d49f0378/pyscard-2.0.3-patch.patch
      # patch setup.py ./pyscard-2.0.3-patch.patch
      # Custom Block 2.0.3

      # Custom Block 2.2.0
      # pyscardfile="https://files.pythonhosted.org/packages/85/80/25d303a786de924cd2f63b791343a91fe4b1eb374a965331debaf32d3ce8/pyscard-2.2.0.tar.gz"
      # Custom Block 2.2.0

      pyscardfile=$(curl -s https://pypi.org/pypi/pyscard/json | jq -r '.info.download_url')
      wget -O- "$pyscardfile" | zcat | tar x --strip-components=1
      sed -i \
        -e 's|platform_include_dirs = \["/usr/include/PCSC", "/usr/local/include/PCSC"\]|platform_include_dirs = ["usr/include/PCSC", "usr/local/include/PCSC", "/snap/cryptnox/current/usr/include/PCSC", "/snap/cryptnox/current/usr/local/include/PCSC"]|' \
        setup.py

      python3 -m pip install --upgrade pipenv
      python3 -m pip install --upgrade pip
      python3 -m pip install setuptools

      python3 setup.py build
      python3 setup.py install

    override-prime: |
      snapcraftctl prime
      cp -a ~/.pyenv/versions/3.12.7/* $SNAPCRAFT_PRIME/usr/

  cryptnox:
    plugin: nil
    source: .
    after: [pyscard]
    build-packages:
      - swig
      - build-essential
      - autoconf
      - libtool
      - pkg-config
      - python3-dev
      - python3-pip
    build-environment:
      - PATH: /root/.pyenv/bin:$PATH
    override-build: |
      eval "$(pyenv init --path)"
      pyenv global 3.12.7
      python3 -m pip install --upgrade pipenv
      python3 -m pip install --upgrade pip

      export PBR_VERSION=1.1.2
      export SKIP_GIT_SDIST=1
      export SKIP_GENERATE_AUTHORS=1
      export SKIP_WRITE_GIT_CHANGELOG=1

      arch=$(uname -i)
      [[ $arch == arm* ]] && echo 'This is ARM Architecture' && \
      python3 -m pip install cryptography --no-binary cryptography

      python3 -m pip install cryptnoxpy
      python3 -m pip install cryptnoxpro

    override-prime: |
      snapcraftctl prime
      cp -a ~/.pyenv/versions/3.12.7/* $SNAPCRAFT_PRIME/usr/

  clean:
    plugin: nil
    after: [cryptnox]
    override-prime: |
     set -eux
     cd $SNAPCRAFT_PRIME/
     find . -type f -exec sed -i 's|/root/.pyenv/versions/3.12.7/bin/python3|/snap/cryptnox/current/usr/bin/python3|g' {} \;

  version-clean:
    plugin: nil
    after: [clean]
    override-pull: |
      snapcraftctl pull
      vversion=$(curl -s https://pypi.org/pypi/cryptnoxpro/json | jq -r '.info.version')
      # stamp=$vversion-$(date +%Y%m%d%H%M%S) #TOO LONG
      stamp=$vversion-$(date +%Y%m%d)
      craftctl set version="$stamp"
      # craftctl set grade=edge
    build-packages:
      - jq
